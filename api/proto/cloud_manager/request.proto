syntax = "proto3";

// build *.pb.go from project root
// protoc -I. --go_out=plugins=grpc,paths=source_relative:. api/proto/cloud_manager/*.proto

package request;

import "api/proto/cloud_manager/entity.proto";
import "api/proto/common/entity.proto";

option go_package = "github.com/dc-lab/sky/api/proto/cloud_manager";

service TCloudManager {
  rpc DoAsync (TAsyncCloudRequest) returns (TAsyncCloudResponse) {}

  rpc PingTransaction (TPingTransactionRequest) returns (TPingTransactionResponse) {}
}

// TODO: describe possible errors
message TAsyncCloudRequest {
  oneof Body {
    TAllocateInstanceRequest allocate_instance_request = 1;
    TDeallocateInstanceRequest deallocate_instance_request = 2;
    TStartInstanceRequest start_instance_request = 3;
    TStopInstanceRequest stop_instance_request = 4;
    TStartTaskRequest start_task_request = 5;
    TStopTaskRequest stop_task_request = 6;
    TDeployImageRequest deploy_image_request = 7;
  }
}

message TAsyncCloudResponse {
  entity.TTransaction transaction = 1;
  TAsyncResponseContent async_response_content = 2;
}

message TAsyncResponseContent {
  oneof Body {
    TAllocateInstanceResponseContent allocate_instance_response_content = 1;
    TDeallocateInstanceResponseContent deallocate_instance_response_content = 2;
    TStartInstanceResponseContent start_instance_response_content = 3;
    TStopInstanceResponseContent stop_instance_response_content = 4;
    TStartTaskResponseContent start_task_response_content = 5;
    TStopTaskResponseContent stop_task_response_content = 6;
    TDeployImageResponseContent deploy_image_response_content = 7;
  }
}

// TODO: describe possible errors
message TPingTransactionRequest {
  string transaction_id = 1;
}

message TPingTransactionResponse {
  entity.ETransactionStatus status = 1;
}

message TAllocateInstanceRequest {
  string user_id = 1;
  string factory_id = 2;
  entity.THardwareData hardware_data = 3;
}

message TAllocateInstanceResponseContent {
  string instance_id = 1;
}

message TDeallocateInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TDeallocateInstanceResponseContent {
}

// make API call to start allocated instance associated with user account
message TStartInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TStartInstanceResponseContent {
}

message TStopInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TStopInstanceResponseContent {
}

// make API call to start task definition associated with user account
message TStartTaskRequest {
  string user_id = 1;
  string factory_id = 2;
  entity.THardwareData hardware_data = 3;
}

message TStartTaskResponseContent {
  string instance_id = 1;
}

message TStopTaskRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TStopTaskResponseContent {
}

message TDeployImageRequest {
  string user_id = 1;
  string instance_id = 2;
  entity.TDockerImage docker_image = 3;
}

message TDeployImageResponseContent {
}
