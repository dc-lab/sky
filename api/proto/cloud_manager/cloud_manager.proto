syntax = "proto3";

// build *.pb.go from project root
// protoc -I. --go_out=plugins=grpc,paths=source_relative:. api/proto/cloud_manager/*.proto

package cloud_manager;

import "api/proto/common/action.proto";
import "api/proto/common/entity.proto";

option go_package = "github.com/dc-lab/sky/api/proto/cloud_manager";

service TCloudManager {
  rpc DoAsync (TAsyncCloudRequest) returns (TAsyncCloudResponse) {}

  rpc PingTransaction (TPingTransactionRequest) returns (TPingTransactionResponse) {}
}

message TAsyncCloudRequest {
  oneof Body {
    TAllocateInstanceRequest allocate_instance_request = 1;
    TDeallocateInstanceRequest deallocate_instance_request = 2;
    TStartInstanceRequest start_instance_request = 3;
    TStopInstanceRequest stop_instance_request = 4;
    TStartTaskRequest start_task_request = 5;
    TStopTaskRequest stop_task_request = 6;
    TDeployImageRequest deploy_image_request = 7;
  }
}

// TODO: describe possible errors
// TODO: use gRPC errors
message TAsyncCloudResponse {
  action.TResult result = 1;
  TTransaction transaction = 2;
  TAsyncResponseContent async_response_content = 3;
}

message TAsyncResponseContent {
  reserved 2, 3, 4, 6, 7;
  oneof Body {
    TAllocateInstanceResponseContent allocate_instance_response_content = 1;
    TStartTaskResponseContent start_task_response_content = 5;
  }
}

message TPingTransactionRequest {
  string transaction_id = 1;
}

// TODO: describe possible errors
// TODO: use gRPC errors
message TPingTransactionResponse {
  action.TResult result = 1;
  ETransactionStatus status = 2;
}

message TTransaction {
  string transaction_id = 1;
}

enum ETransactionStatus {
  UNKNOWN = 0;
  ACTIVE = 1;
  COMPLETED = 2;
  EXPIRED = 3;
  CANCELLED = 4;
}

message TAllocateInstanceRequest {
  string user_id = 1;
  string factory_id = 2;
  entity.THardwareData hardware_data = 3;
}

message TAllocateInstanceResponseContent {
  string instance_id = 1;
}

message TDeallocateInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

// make API call to start allocated instance associated with user account
message TStartInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TStopInstanceRequest {
  string user_id = 1;
  string instance_id = 2;
}

// make API call to start task definition associated with user account
message TStartTaskRequest {
  string user_id = 1;
  string factory_id = 2;
  entity.THardwareData hardware_data = 3;
}

message TStartTaskResponseContent {
  string instance_id = 1;
}

message TStopTaskRequest {
  string user_id = 1;
  string instance_id = 2;
}

message TDeployImageRequest {
  string user_id = 1;
  string instance_id = 2;
  TDockerImage docker_image = 3;
}

message TDockerImage {
  string registry = 1;
  string repository = 2;
  string image = 3;
  string tag = 4;
}
