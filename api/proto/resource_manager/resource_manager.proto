syntax = "proto3";

// build *.pb.go from project root
// protoc -I. --go_out=plugins=grpc,paths=source_relative:. api/proto/resource_manager/*.proto

package resource_manager;

import "api/proto/common/action.proto";
import "api/proto/common/entity.proto";

option go_package = "github.com/dc-lab/sky/api/proto/resource_manager";

service ResourceManager {
    rpc Send (stream TFromAgentMessage) returns (stream TToAgentMessage) {}
}

message TTask {
    string id = 1; // required
    string execution_shell_command = 2; // required
    string requirements_shell_command = 3; // optional
}

message TGreetings {
    string token = 1; // required
}

message THardwareRequest {
}

message TTaskRequest {
    TTask task = 1; // required
}

message TTaskResponse {
    string task_id = 1; // required
    action.TResult result = 2; // required
}

message TFile {
    string id = 1; // required
    string agent_relative_local_path = 2; // required
}

message TStageInRequest {
    string task_id = 1; // required
    repeated TFile files = 2;
}

message TStageInResponse {
    string task_id = 1; // required
    action.TResult result = 2; // required
}

message TStageOutRequest {
    string task_id = 1; // required
}

message TStageOutResponse {
    string task_id = 1; // required
    repeated TFile task_files = 2;
}

message TToAgentMessage {
    oneof Body {
        THardwareRequest hardware_request = 1;
        TTaskRequest task_request = 2;
        TStageInRequest stage_in_request = 3;
        TStageOutRequest stage_out_request = 4;
    }
}

message TFromAgentMessage {
    oneof Body {
        entity.THardwareData hardware_data = 1;
        TGreetings greetings = 2;
        TTaskResponse task_response = 3;
        TStageInResponse stage_in_response = 4;
        TStageOutResponse stage_out_response = 5;
    }
}
