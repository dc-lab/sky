syntax = "proto3";

// build *.pb.go from project root
// protoc -I. --go_out=plugins=grpc,paths=source_relative:. api/proto/resource_manager/*.proto

package pb;

import "google/api/annotations.proto";
import "api/proto/action.proto";
import "api/proto/hardware_data.proto";
import "api/proto/task_results.proto";

option go_package = "github.com/dc-lab/sky/api/proto";

// FIXME(BigRedEye): Refactor this shit
service ResourceManager {
    rpc Send (stream TFromAgentMessage) returns (stream TToAgentMessage) {}

    rpc Update (TResourceRequest) returns (TResourceResponse) {}

    rpc AgentAction (TRMRequest) returns (TRMResponse) {}

    rpc GetResources (GetResourcesRequest) returns (GetResourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/resources"
        };
    }
}

message TTask {
    string id = 1; // required
    string execution_shell_command = 2; // required
    string requirements_shell_command = 3; // optional
    string docker_image = 4; //optional
}

message TGreetings {
    string token = 1; // required
}

message TGreetingsValidation {
    TResult result = 1; // required
}

message TPermissions {
    repeated string users = 1;
    repeated string groups = 2;
}

enum EResourceType {
    RESOURCE_UNKNOWN = 0;
    SINGLE = 1;
    POOL = 2;
    CLOUD_INSTANCE = 3;
    CLOUD_TASK = 4;
}

message TResource {
    string id = 1; // required
    EResourceType type = 2; // required
    string ownerId = 3; // required
    string token = 4; // required
    TPermissions permissions = 5; // required
    string name = 6; // required

    THardwareData total_resources = 7; // optional
    THardwareData available_resources = 8; // optional
}

message THardwareRequest {
}

message THardwareResponse {
    THardwareData total_hardware_data = 1;
    THardwareData free_hardware_data = 2;
}

message TTaskRequest {
    TTask task = 1; // required
}

message TTaskResponse {
    string task_id = 1; // required
    TResult result = 2; // required
    repeated TaskFile task_files = 3; // required
}

message TFile {
    string id = 1; // required
    string agent_relative_local_path = 2; // required
    string hash = 3; // required
}

message TStageInRequest {
    string task_id = 1; // required
    repeated TFile files = 2;
}

message TStageInResponse {
    string task_id = 1; // required
    TResult result = 2; // required
}

message TStageOutRequest {
    string task_id = 1; // required
    string agent_relative_local_path = 2; // required
}

message TStageOutResponse {
    string task_id = 1; // required
    TFile task_file = 2; // required
}

message TCancelTaskRequest {
    string task_id = 1; // required
}

message TDeleteTaskRequest {
    string task_id = 1; // required
}

message TCreateResourceRequest {
    TResource resource = 1; // required
}

message TCreateResourceResponse {
}

message TDeleteResourceRequest {
    string resource_id = 1; // required
    string user_id = 2; // required
}

message TDeleteResourceResponse {
}

// FIXME(BigRedEye) ...
message TToAgentMessage {
    oneof Body {
        THardwareRequest hardware_request = 1;
        TTaskRequest task_request = 2;
        TStageInRequest stage_in_request = 3;
        TStageOutRequest stage_out_request = 4;
        TCancelTaskRequest cancel_task_request = 5;
        TDeleteTaskRequest delete_task_request = 6;
        TGreetingsValidation greetings_validation = 7;
    }
}

// FIXME(BigRedEye) .....
message TFromAgentMessage {
    oneof Body {
        THardwareResponse hardware_response = 1;
        TGreetings greetings = 2;
        TTaskResponse task_response = 3;
        TStageInResponse stage_in_response = 4;
        TStageOutResponse stage_out_response = 5;
    }
}

// FIXME(BigRedEye) .......
message TResourceRequest {
    oneof Body {
        TCreateResourceRequest create_resource_request = 1;
        TDeleteResourceRequest delete_resource_request = 2;
    }
}

// FIXME(BigRedEye) .........
message TResourceResponse {
    oneof Body {
        TCreateResourceResponse create_resource_response = 1;
        TDeleteResourceResponse delete_resource_response = 2;
    }
}

message TRMRequest {
    string resource_id = 1; // required
    TToAgentMessage real_message = 2; //required
}

// FIXME(BigRedEye) WTF?
message TRMResponse {
    enum TResultCode {
        NONE = 0;
        OK = 1;
        NOT_FOUND = 2;
    }
    TResultCode result_code = 1; // required
}


message GetResourcesRequest {
    THardwareData requirements = 1; // optional
    uint32 limit = 2; // optional
}

message GetResourcesResponse {
    repeated TResource resources = 1;
}
